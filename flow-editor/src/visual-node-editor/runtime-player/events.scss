$blink-duration: 3s; // change also BLINK_TIMEOUT in play-event.ts

$runtime-processing-color: #88f8ff;
$runtime-active-color: #c8ffc7;

@mixin event-vars(
  $bg-color-light,
  $border-color-light,
  $bg-color-dark,
  $border-color-dark
) {
  &:not(.dark) {
    --event-bg-color: #{$bg-color-light};
    --event-border-color: #{$border-color-light};
  }

  &.dark {
    --event-bg-color: #{$bg-color-dark};
    --event-border-color: #{$border-color-dark};
    // --event-bg-color-transition: #{lighten(#{$bg-color-dark}, 20%)};
  }
}

.base-node-view-wrapper[data-runtime="processing"] {
  // background: var(--event-bg-color);
  // border-color: var(--event-border-color);

  .ins-view-inner {
    @include event-vars($tblue-300, $tblue-500, $tblue-700, $tblue-500);
    animation: pulse 1.5s infinite;
  }
}

.base-node-view-wrapper[data-runtime="done"] {
  .ins-view-inner {
    @include event-vars($green-300, $green-500, $green-700, $green-500);
    animation: blink $blink-duration;
  }
}

.ins-view:not(.error-caught) {
  .base-node-view-wrapper[data-runtime="error"] {
    .ins-view-inner {
      @include event-vars($red-300, $red-500, $red-700, $red-500);
      animation: blink $blink-duration;
    }
  }
}

.ins-view.error-caught {
  .base-node-view-wrapper[data-runtime="error"] {
    .ins-view-inner {
      @include event-vars($green-300, $green-500, $green-700, $green-500);
      animation: blink-error $blink-duration * 2;
    }
  }
}

.main-instance-events-indicator[data-runtime="processing"] {
  animation: pulse 1.5s infinite;
  background: $runtime-processing-color;

  .status-text:after {
    content: "Processing";
  }
}

.main-instance-events-indicator[data-runtime="error"] {
  animation: blink-error $blink-duration * 2;

  .status-text:after {
    content: "Error";
  }
}

.main-instance-events-indicator[data-runtime="done"] {
  animation: blink-done $blink-duration * 2;

  .status-text:after {
    content: "Completed";
  }
}

.pin:not(.error-pin) .pin-inner[data-runtime="active"],
.pin.error-pin.connected .pin-inner[data-runtime="active"],
.node-io-view-inner[data-runtime="active"] {
  &:not([data-runtime-queue]) {
    @include event-vars($green-300, $green-500, $green-700, $green-500);
    animation: blink $blink-duration;
  }
}

.pin.error-pin:not(.connected) .pin-inner[data-runtime="active"] {
  @include event-vars($red-300, $red-500, $red-700, $red-500);
  animation: blink $blink-duration * 2;
  // transition: background-color ease-in-out 0.05s, box-shadow ease-in-out 0.2s;
  // background: #C1FF91 !important;
  // box-shadow: 0px 0px 10px 2px rgba(10, 126, 0, 0.5);
}

.node-io-view-inner[data-runtime-queue],
.pin-inner[data-runtime-queue] {
  @include event-vars($purple-300, $purple-500, $purple-700, $purple-500);
  animation: pulse 1.5s infinite;
}

@keyframes pulse {
  0% {
    background: var(--event-bg-color);
    border-color: var(--event-border-color);
    transform: scale(0.98);
    filter: brightness(1);
  }

  50% {
    background: var(--event-bg-color);
    border-color: var(--event-border-color);
    transform: scale(1.01);
    filter: brightness(1.1);
  }

  100% {
    background: var(--event-bg-color);
    border-color: var(--event-border-color);
    transform: scale(0.98);
    filter: brightness(1);
  }
}

@keyframes blink {
  0% {
    // background-color: $base-color;
  }
  3% {
    background-color: var(--event-bg-color);
    border-color: var(--event-border-color);
  }
  30% {
    background-color: var(--event-bg-color);
    border-color: var(--event-border-color);
    filter: brightness(1.2);
  }
  100% {
    // background-color: $base-color;
  }
}
